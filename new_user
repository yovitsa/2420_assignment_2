#!/bin/bash

#User nees to run the script as root(sudo user)

if [[ "$EUID" -ne 0 ]]; then
     echo "Please run this script as root user"
     exit 1
fi
#Function to display the usege of options

usage() {

    echo "Usage: $0 -u username -p password -s shell -h home_dir -g groups"
    echo " -u username Type username for th enew user"
    echo " -p password: THe password for the new user"
    echo " -s shell: The login shell for the new user"
    echo " -h home_dir: Home directory for the new user"
    echo " -g groups : Groups for the new user"
    exit 1


}


#Variables for options
#These options are needed, so we can control the user creation

username=""

password=""

shell="/bin/bash"

home_dir=""

groups=""
#Options created so we can parse the options to the command line

while getopts ":u:p:s:h:g" opt; do
     case "${opt}" in
	#The first case, this case handles the username option
	u)
	  username=${OPTARG}
	  ;;
	#The second case handles the user password
	p)
	  password=${OPTARG}
	  ;;
	#This case handles the shell, in this script the default shell is atuomatiacally assigned to variables, so it will always default to it
  	s)
	  shell=${OPTARG}
	  ;;
	#This case hadnles a creation of the hoem directory
  	h)
	  home_dir=${OPTARG}
	  ;;
	#This case handles additional groups  
	g)
	#This case handles every ohter case, it will inform a user that there has been an error. 
	#Usage funciton is called, and it will display all the possible options for the user
	  group=${OPTARG}
	  ;;
	*)
	  echo "That is not a valid option ${OPTARG}"
	  usage
	  ;;
     esac
done

#This if statement checks if the string is empty.
#Then prompots the user to enter a new username
if [[ -z $username ]]; then
    read -p "Please neter a username" username
fi

#This if statement checks if the password is empty, then asks user to create a new password. 
#Using passwd utility the user will create a new password for the new user
if [[ -z $password ]]; then
    read -sp "Please enter your password" password 
     
fi

#This if statement checks if the hom_dir variable is empty
#And it will set default home idrectory
if [[ -z $home_dir ]]; then
    home_dir="/home/$username"	
fi

if [[ ! -d $home_dir ]]; then
#This if statement creates a new home directory
#After that the content of the etc/skel directory will be copied to the new home directory
#/. will ensure to copied all the files, including hidden files

    #Informing the user about the current status
    echo "Creating home directory $home_dir"
    #Creating a home directory
    mkdir -p "$home_dir"
    
    #Coping the /etc/skel to our newly created home directory
    cp -r /etc/skel/. home_dir
    
fi

#This statement creates a new shell.
#In this script the shell is set to default #!/bin/bash
if [[ -z $shell ]]; then
    read -p "Enter the login shell for the new user (e.g., /bin/bash): " shell
    shell="${shell:-/bin/bash}"  
fi
#Creating primary group for the newly created user
gid=$(($(tail -n 1 /etc/group | cut -d: -f3) + 1))
echo "$username:x:$gid:" | tee -a /etc/group 

#Creating a user id and group id
uid=$(($(tail -n 1 /etc/passwd | cut -d: -f3) + 1))
gid=$uid

#Adding user to the etc/passwd directory
echo "$username:x:$uid:$gid:$username:$home_dir:$shell" | tee -a /etc/passwd 

#Setting up teh user password
echo "$password" | passwd --stdin "$username"  

#If no additioanl groups are provided, the user will be prompt for it
if [[ -z $groups ]]; then
    read -p "Type the additional groups for the user" groups
fi

#Additional groups
if [[ -n $groups ]]; then
     
     #This will add groups to the list of groups
     #IFS will seprate them by commas
     IFS="," read -r -a list_of_groups <<< "$groups"
     
     #looping through the list of groups 
     for group in "${list_of_groups[@]}"; do
	
     #This if statement will check if the group exist in /etc/group dir
     #If the user exist the user will be added to the group
     if grep -q "^$group:" /etc/group; then
	
	      sed -i "/^group:/ s/$/,$username/" /etc/group

     #If the group does not exist the else statement will be executed
     #The group will be created 
     #And the new user will be added
     
     #New group created
     #Tails checks the last line in the /etc/group directory 
     #In order to get the higest GID
     #one extra group gets created and, GID gets incremented by 1
     # New GID gets appended to /etc/group
	
     
     else 
     	
	      new_gif=$(($(tail -n 1 /etc/group | cut -d: -f3) + 1))
	      echo "$group:x:$new_gid:$username" | tee -a /etc/group 
     fi 
 done

fi

echo "User $username successfully created"













